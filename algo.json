[
    {
        "id": 0,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 0,
        "y": 0,
        "title": ".",
        "text": "root",
        "calculatedX": 334,
        "calculatedY": 672,
        "height": 261,
        "width": 146
    },
    {
        "id": 1,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 294,
        "y": 551,
        "title": ".",
        "text": "//[color=#50fa7b]a and p declared separately[/color]\nint a ;\nint *p ;\n\n//[color=#50fa7b]Nothing on left[/color]\na = 10;\np = &a ;\n\nint b = 20;\n*p = b;\n\nwhat is a and b",
        "calculatedX": 334,
        "calculatedY": 672,
        "height": 261,
        "width": 146
    },
    {
        "id": 2,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 298,
        "y": 838,
        "title": ".",
        "text": "a is 20\nb is 20",
        "calculatedX": 338,
        "calculatedY": 959,
        "height": 68,
        "width": 60,
        "show": false
    },
    {
        "id": 3,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 517,
        "y": 551,
        "title": ".",
        "text": "Declare and initialize\n//[color=#50fa7b]a and p declared same place[/color]\n[size=24]👌[/size]\n\nint a = 10;\nint *p = &a;",
        "calculatedX": 557,
        "calculatedY": 672,
        "height": 152,
        "width": 189,
        "tag": [
            "test",
            "test1"
        ]
    },
    {
        "id": 4,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 528,
        "y": 723,
        "title": ".",
        "text": "😮\nint [size=24]*p[/size] is same as \n[size=24]int*[/size] p",
        "calculatedX": 568,
        "calculatedY": 844,
        "height": 110,
        "width": 184
    },
    {
        "id": 5,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 397,
        "y": 996,
        "title": ".",
        "text": "int *p = &a;\n\nwhat is p+1 if p is 1000\n\nprintf(\"%d\\n\", p+1) 1004\n\n\nget size of int by below function\n\n[size=24]sizeof(int)[/size]\n[size=24]🪁[/size]",
        "calculatedX": 437,
        "calculatedY": 1117,
        "height": 181,
        "width": 184
    },
    {
        "id": 8,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 657,
        "y": 866,
        "title": ".",
        "text": "printf(\"%d\\n\", *(p + 97349879439) )\n\n[size=24] 🗑️ Garbage [/size]\n\n ",
        "calculatedX": 697,
        "calculatedY": 987,
        "height": 106,
        "width": 282
    },
    {
        "id": 9,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 399,
        "y": 1234,
        "title": ".",
        "text": "int a = 1025\n// 1025 binary is \n// 00000000 0000000 00000100 00000001\nint *p = &a\n\nprintf(\"%d, %d\", p, *p)\n\nchar *p0 ;\np0 = (char*)p;\n\n[color=#ffb86c] printing as integer[/color]\nprintf(\"%d, %d\", p0, *p0)\n\n",
        "calculatedX": 439,
        "calculatedY": 1355,
        "height": 146,
        "width": 172
    },
    {
        "id": 10,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 686,
        "y": 1216,
        "title": ".",
        "text": "Output\n\n65436354, 1025\n65436354, 1\n\n[size=20]Same address.😮[/size]\nAddress goes from right to left ⬅️\n\nint reads all -> 1025\n00000000 0000000 00000100 00000001\n\nchar reads right most bit -> 1\nxxxxxxxx xxxxxxxx xxxxxxxx  00000001",
        "calculatedX": 726,
        "calculatedY": 1337,
        "height": 164,
        "width": 185,
        "show": false
    },
    {
        "id": 11,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 707,
        "y": 1456,
        "title": ".",
        "text": "What is \nprintf(\"%d, %d\", p+1, *(p+1))\nprintf(\"%d, %d\", p0+1, *(p0+1))\n\n",
        "calculatedX": 747,
        "calculatedY": 1577,
        "height": 70,
        "width": 162
    },
    {
        "id": 13,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 711,
        "y": 1545,
        "title": ".",
        "text": "Output\n\n65436358, Garbage value\n65436355, 4\n",
        "calculatedX": 751,
        "calculatedY": 1666,
        "height": 90,
        "width": 134,
        "show": false
    },
    {
        "id": 14,
        "type": "bubble",
        "style": {
            "default": "bubble",
            "font-size": "16px",
            "color": "#ff9800"
        },
        "x": 734,
        "y": 1038,
        "title": ".",
        "text": "*(p+1)\n\nincrement address by 1 and get value",
        "calculatedX": 774,
        "calculatedY": 1159,
        "height": 149,
        "width": 88
    },
    {
        "id": 15,
        "type": "bubble",
        "style": {
            "default": "bubble",
            "font-size": "8px"
        },
        "x": 415,
        "y": 1466,
        "title": ".",
        "text": "//[color=#DCDCAA]Version 1: This wont Update original variable\npass dereferenced pointer[/color]\n\n//[color=#DCDCAA]x is a plain variable[/color]\nvoid update(int x){ x=42; }\n\nint main(){\nint value=10; int *ptr=&value;\nupdate(*ptr);\n}",
        "calculatedX": 455,
        "calculatedY": 1587,
        "height": 142,
        "width": 252
    },
    {
        "id": 16,
        "type": "bubble",
        "style": {
            "default": "bubble",
            "font-size": "8px"
        },
        "x": 433,
        "y": 1682,
        "title": ".",
        "text": "Version 2:\n//[color=#DCDCAA]pass var address[/color]\n\nvoid update(int *p){*p = 42;}\nint main(){\nint value=10; update(&value)\n}",
        "calculatedX": 473,
        "calculatedY": 1803,
        "height": 122,
        "width": 228
    },
    {
        "id": 17,
        "type": "bubble",
        "style": {
            "default": "bubble",
            "font-size": "8px"
        },
        "x": 440,
        "y": 1841,
        "title": ".",
        "text": "Version 3:\n\nvoid update(int **p){ **p = 42; }\nint main(){\nint value=10;\nint *ptr = &value;\nupdate(&ptr;)\n}",
        "calculatedX": 480,
        "calculatedY": 1962,
        "height": 113,
        "width": 188
    },
    {
        "id": 23,
        "type": "bubble",
        "style": {
            "default": "bubble",
            "font-size": "12px",
            "color": "red"
        },
        "x": 187,
        "y": 1720,
        "title": ".",
        "text": "int **p is declaration\np is a pointer to a pointer\n       *p           &ptr\n\np = address of pointer\n*p = address of value\n**p = value",
        "calculatedX": 227,
        "calculatedY": 1841,
        "height": 160,
        "width": 172
    },
    {
        "id": 25,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 208,
        "y": 537,
        "title": ".",
        "text": ".[size=28]\n🌳\n🌲\n🌴\n🌵\n[/size]",
        "calculatedX": 248,
        "calculatedY": 658,
        "height": 215,
        "width": 65
    },
    {
        "id": 26,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": -490,
        "y": 990,
        "title": ".",
        "text": "[size=28]🌳 🌲 🌴 🌵 🎄 🌾 🎋 🎍 🪵 🪨 🌿 ☘️ 🍀 🍃 🍂 🍁 🌱 🪴 🌸 🌺 🌻 🌼 🌷 🌹 🥀 🌳 🌲 🌴 🌵 🎄 🌾 🎋 🎍 🪵 🪨 🌿 ☘️ 🍀 🍃 🍂 🍁 🌱 🪴 🌸 🌺 🌻 🌼 🌷 🌹 🥀[/size]",
        "calculatedX": -450,
        "calculatedY": 1111,
        "height": 200,
        "width": 200,
        "tag": [
            "emoji"
        ]
    },
    {
        "id": 27,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": -487,
        "y": 712,
        "title": ".",
        "text": "[size=28]🏠 🏡 🏘️ 🏢 🏬 🏭 🏗️ 🏛️ 🏦 🏫 🏥 🏨 🏙️ 🌆 🌇 🌃 🗼 🗽 🧱🚆 🚇 🚈 🚉 🚄 🚅 🚝 🚞 🚋 🚃 🚂🚗 🚙 🚕 🚓 🚑 🚒 🚌 🚎 🚐 🚚 🚛 🚜 🏍️ 🛵 🛺 🚲 🚨[/size]",
        "calculatedX": -447,
        "calculatedY": 833,
        "height": 292,
        "width": 435,
        "tag": [
            "emoji"
        ]
    },
    {
        "id": 28,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": -487,
        "y": 490,
        "title": ".",
        "text": "[size=28]🏠🏡🏘️🏚️🛖🛖🏢🏢🏬🏣🏤🏥🏨🏦🏫🏛️🏭🏭🏗️🧱[/size]",
        "calculatedX": -447,
        "calculatedY": 611,
        "height": 200,
        "width": 200,
        "tag": [
            "emoji"
        ]
    },
    {
        "id": 29,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": -141,
        "y": 1017,
        "title": ".",
        "text": "[size=28]🏔️ ⛰️ 🏞️ 🌄 🌅 🌊 🌊 🏝️ 🏖️ 🏞️ 🏕️ 🌊 🌅[/size]",
        "calculatedX": -101,
        "calculatedY": 1138,
        "height": 200,
        "width": 200,
        "tag": [
            "emoji"
        ]
    },
    {
        "id": 30,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 171,
        "y": 953,
        "title": ".",
        "text": "[size=100]🏔️\n🏔️\n🏔️[/size].",
        "calculatedX": 211,
        "calculatedY": 1074,
        "height": 473,
        "width": 140
    },
    {
        "id": 31,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 179,
        "y": 2023,
        "title": ".",
        "text": "[size=100]🛣️[/size]",
        "calculatedX": 219,
        "calculatedY": 2144,
        "height": 171,
        "width": 148
    },
    {
        "id": 32,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1741,
        "y": 1088,
        "title": ".",
        "text": "[size=100]🛝[/size]",
        "calculatedX": 1781,
        "calculatedY": 1209,
        "height": 176,
        "width": 153
    },
    {
        "id": 33,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 161,
        "y": 1478,
        "title": ".",
        "text": "[size=100]🏕️[/size]",
        "calculatedX": 201,
        "calculatedY": 1599,
        "height": 162,
        "width": 168
    },
    {
        "id": 34,
        "type": "goto",
        "style": {
            "default": "goto"
        },
        "x": 99,
        "y": 9,
        "title": ".",
        "text": "pointerBasic",
        "gotoid": "1",
        "calculatedX": 139,
        "calculatedY": 130
    },
    {
        "id": 35,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 455,
        "y": 2040,
        "title": ".",
        "text": "T a;          int a;\nT* p;         int *p;\n\np                        a\n==              =>    ==========\n96785965765975          garbage\n\na=[1,2,3]\na[4] => garbage\n\na=malloc(10)\np=a\ndealloc(a)\nwhat about p?   dangling🦥pointer\n",
        "calculatedX": 495,
        "calculatedY": 2161,
        "height": 185,
        "width": 195
    },
    {
        "id": 36,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 722,
        "y": 2279,
        "title": ".",
        "text": "pointer space is usually 1 machine word\n1 byte\n⚠️may vary based on 32bit 64bit\n\nint *p => only pointer space🧠 allocated\nint a=>only now variable got space🧠\np=&a\n\nint a - static declaration - stack\nmalloc(10) - heap\n\nf(){\nint a // i got memory😊\n}\n// i lost memory🥺\n\nf(int **ptr){\nint a = 10;\n*ptr = &a; //🦥dangling pointer\nreturn 0;\n}\n\n",
        "calculatedX": 762,
        "calculatedY": 2400,
        "height": 200,
        "width": 200
    },
    {
        "id": 37,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 293,
        "y": 2272,
        "title": ".",
        "text": "int g(int **ptr){\nif ((*iptr=malloc(sizeof(int)))==NULL)\n  return -1;\nreturn 0;\n}\n\nGoes to [size=22]HEAP[/size] no dangling pointer\n\n❗DEALLOCATING HEAP is user responsibility❗ else memory leak",
        "calculatedX": 333,
        "calculatedY": 2393,
        "height": 138,
        "width": 301
    },
    {
        "id": 38,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 188,
        "y": 2566,
        "title": ".",
        "text": "[size=32]🍇[/size]",
        "calculatedX": 228,
        "calculatedY": 2687,
        "height": 72,
        "width": 65
    },
    {
        "id": 39,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 661,
        "y": 2551,
        "title": ".",
        "text": "[size=32]🍇[/size]",
        "calculatedX": 701,
        "calculatedY": 2672,
        "height": 75,
        "width": 61
    },
    {
        "id": 40,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 247,
        "y": 2713,
        "title": ".",
        "text": "typedef struct ListElmt_ {\nvoid *data;\nstruct ListElmt_ *next;\n} ListElmt\n\nListElmt_   =>    forward declaration\n⚠️Only a pointer can point to its own not a struct⚠️\n\nListElmt    =>    Alias\n\n",
        "calculatedX": 287,
        "calculatedY": 2834,
        "height": 130,
        "width": 271
    },
    {
        "id": 41,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 343,
        "y": 2547,
        "title": ".",
        "text": "actual data\n📝\n📝\n📝\n\nmultiple structure can point to same data\nstructures are just pointers\ndeleting 🍇usually involves deleting📝",
        "calculatedX": 383,
        "calculatedY": 2668,
        "height": 117,
        "width": 272
    },
    {
        "id": 42,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1434,
        "y": 751,
        "title": ".",
        "text": "void bubbleSort(int arr[], int n){",
        "calculatedX": 1474,
        "calculatedY": 872,
        "height": 53,
        "width": 176,
        "tag": [
            "bubblesort"
        ]
    },
    {
        "id": 43,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1434,
        "y": 848,
        "title": ".",
        "text": "int i, j;\nbool swapped;",
        "calculatedX": 1474,
        "calculatedY": 969,
        "maximize": true,
        "height": 49,
        "width": 76,
        "tag": [
            "bubblesort"
        ]
    },
    {
        "id": 44,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1423,
        "y": 805,
        "title": ".",
        "text": "for (i = 0; i < n - 1; i++) {",
        "calculatedX": 1463,
        "calculatedY": 926,
        "height": 52,
        "width": 174,
        "tag": [
            "bubblesort"
        ]
    },
    {
        "id": 45,
        "type": "bubble",
        "style": {
            "default": "bubble",
            "font-size": "16px",
            "color": "#CCCCCC"
        },
        "x": 1684,
        "y": 843,
        "title": ".",
        "text": "n-1 \n1 < less than last element\nj + 1 inside",
        "calculatedX": 1724,
        "calculatedY": 964,
        "maximize": true,
        "height": 96,
        "width": 247,
        "tag": [
            "bubblesort"
        ]
    },
    {
        "id": 46,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1432,
        "y": 910,
        "title": ".",
        "text": "swapped = false;",
        "calculatedX": 1472,
        "calculatedY": 1031,
        "height": 37,
        "width": 93,
        "tag": [
            "bubblesort"
        ]
    },
    {
        "id": 47,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1424,
        "y": 968,
        "title": ".",
        "text": "for (j = 0; j < n - i - 1; j++) {\n  if (arr[j] > arr[j + 1]) {\n    swap(&arr[j], &arr[j + 1]);\n    swapped = true;\n  }\n}",
        "calculatedX": 1464,
        "calculatedY": 1089,
        "height": 84,
        "width": 199,
        "tag": [
            "bubblesort"
        ]
    },
    {
        "id": 49,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1414,
        "y": 1194,
        "title": ".",
        "text": "go full length of array",
        "calculatedX": 1454,
        "calculatedY": 1315,
        "maximize": true,
        "height": 56,
        "width": 164
    },
    {
        "id": 50,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1411,
        "y": 1265,
        "title": ".",
        "text": "i = 0; i < n\ni = 0; i <= n-1\n\ni = 1; i <= n",
        "calculatedX": 1451,
        "calculatedY": 1386,
        "height": 100,
        "width": 100,
        "show": true
    },
    {
        "id": 51,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1338,
        "y": 1617,
        "title": ".",
        "text": "\n[] [] [] [] [] \nn = 5\nn//2 = 2\n0 to <2  |  2 to <5\n[0] [1]    [2] [3] [4] \nOdd moves to right",
        "calculatedX": 1378,
        "calculatedY": 1738,
        "height": 172,
        "width": 140
    },
    {
        "id": 52,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1589,
        "y": 1621,
        "title": ".",
        "text": "[] [] [] []\nn = 4\nn//2 = 2\n0 to <2  |  2 to <4\n[0] [1]    [2] [3]\nequal split",
        "calculatedX": 1629,
        "calculatedY": 1742,
        "height": 140,
        "width": 153
    },
    {
        "id": 53,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1826,
        "y": 1615,
        "title": ".",
        "text": "[]\nn = 1\nn//2 = 0\n0 to <0  |  0 to <1\ninvalid  |  [0]\nodd to right",
        "calculatedX": 1866,
        "calculatedY": 1736,
        "height": 143,
        "width": 150
    },
    {
        "id": 54,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1709,
        "y": 1233,
        "title": ".",
        "text": "0 to < [size=24]n[/size]\nRuns [size=24]n[/size] times, all elements\n\n0 to < [size=24]n-1[/size]\nRuns [size=24]n-1[/size] times, except last\n\nbasically the value of < N",
        "calculatedX": 1749,
        "calculatedY": 1354,
        "height": 232,
        "width": 212
    },
    {
        "id": 55,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1218,
        "y": 1196,
        "title": ".",
        "text": "[size=100]📏[/size]",
        "calculatedX": 1258,
        "calculatedY": 1317,
        "height": 163,
        "width": 142
    },
    {
        "id": 56,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1033,
        "y": 1617,
        "title": ".",
        "text": "[size=50]🧹floor[/size]",
        "calculatedX": 1073,
        "calculatedY": 1738,
        "height": 112,
        "width": 238
    },
    {
        "id": 57,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1702,
        "y": 751,
        "title": ".",
        "text": "full code\n\n#include <stdio.h>\n#include <stdbool.h>\n\n// Swap function\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\n// Bubble Sort with early exit\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        bool swapped = false;\n\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(&arr[j], &arr[j + 1]);\n                swapped = true;\n            }\n        }\n\n        // If no two elements were swapped, the array is already sorted\n        if (!swapped)\n            break;\n    }\n}\n\n// Print the array\nvoid printArray(int arr[], int n) {\n    for (int i = 0; i < n; i++)\n        printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n}\n\n// Main function\nint main() {\n    int arr[] = {64, 25, 12, 22, 11};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    printf(\"Original array: \");\n",
        "calculatedX": 1742,
        "calculatedY": 872,
        "height": 36,
        "width": 95,
        "tag": [
            "bubblesort"
        ]
    },
    {
        "id": 58,
        "type": "bubble",
        "style": {
            "default": "bubble"
        },
        "x": 1294,
        "y": 667,
        "title": ".",
        "text": "[size=50]🫧[/size]",
        "calculatedX": 1334,
        "calculatedY": 788,
        "height": 111,
        "width": 104,
        "tag": [
            "bubblesort"
        ]
    },
    {
        "id": 59,
        "type": "goto",
        "style": {
            "default": "goto"
        },
        "x": 104,
        "y": 51,
        "title": ".",
        "text": "bubble",
        "gotoid": "58",
        "calculatedX": 144,
        "calculatedY": 172
    }
]
